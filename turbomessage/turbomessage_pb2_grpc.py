# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import turbomessage_pb2 as turbomessage__pb2


class TurboMessageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createUser = channel.unary_unary(
                '/turbomessage.TurboMessage/createUser',
                request_serializer=turbomessage__pb2.User.SerializeToString,
                response_deserializer=turbomessage__pb2.Status.FromString,
                )
        self.userExists = channel.unary_unary(
                '/turbomessage.TurboMessage/userExists',
                request_serializer=turbomessage__pb2.User.SerializeToString,
                response_deserializer=turbomessage__pb2.Status.FromString,
                )
        self.sendMail = channel.unary_unary(
                '/turbomessage.TurboMessage/sendMail',
                request_serializer=turbomessage__pb2.Mail.SerializeToString,
                response_deserializer=turbomessage__pb2.Status.FromString,
                )
        self.mailInRead = channel.unary_unary(
                '/turbomessage.TurboMessage/mailInRead',
                request_serializer=turbomessage__pb2.Mail.SerializeToString,
                response_deserializer=turbomessage__pb2.Status.FromString,
                )
        self.mailOutRead = channel.unary_unary(
                '/turbomessage.TurboMessage/mailOutRead',
                request_serializer=turbomessage__pb2.Mail.SerializeToString,
                response_deserializer=turbomessage__pb2.Status.FromString,
                )
        self.deleteMailIn = channel.unary_unary(
                '/turbomessage.TurboMessage/deleteMailIn',
                request_serializer=turbomessage__pb2.Mail.SerializeToString,
                response_deserializer=turbomessage__pb2.Status.FromString,
                )
        self.deleteMailOut = channel.unary_unary(
                '/turbomessage.TurboMessage/deleteMailOut',
                request_serializer=turbomessage__pb2.Mail.SerializeToString,
                response_deserializer=turbomessage__pb2.Status.FromString,
                )
        self.readMailIn = channel.unary_stream(
                '/turbomessage.TurboMessage/readMailIn',
                request_serializer=turbomessage__pb2.User.SerializeToString,
                response_deserializer=turbomessage__pb2.Mail.FromString,
                )
        self.readMailOut = channel.unary_stream(
                '/turbomessage.TurboMessage/readMailOut',
                request_serializer=turbomessage__pb2.User.SerializeToString,
                response_deserializer=turbomessage__pb2.Mail.FromString,
                )


class TurboMessageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def createUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def userExists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendMail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mailInRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mailOutRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteMailIn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteMailOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def readMailIn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def readMailOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TurboMessageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createUser': grpc.unary_unary_rpc_method_handler(
                    servicer.createUser,
                    request_deserializer=turbomessage__pb2.User.FromString,
                    response_serializer=turbomessage__pb2.Status.SerializeToString,
            ),
            'userExists': grpc.unary_unary_rpc_method_handler(
                    servicer.userExists,
                    request_deserializer=turbomessage__pb2.User.FromString,
                    response_serializer=turbomessage__pb2.Status.SerializeToString,
            ),
            'sendMail': grpc.unary_unary_rpc_method_handler(
                    servicer.sendMail,
                    request_deserializer=turbomessage__pb2.Mail.FromString,
                    response_serializer=turbomessage__pb2.Status.SerializeToString,
            ),
            'mailInRead': grpc.unary_unary_rpc_method_handler(
                    servicer.mailInRead,
                    request_deserializer=turbomessage__pb2.Mail.FromString,
                    response_serializer=turbomessage__pb2.Status.SerializeToString,
            ),
            'mailOutRead': grpc.unary_unary_rpc_method_handler(
                    servicer.mailOutRead,
                    request_deserializer=turbomessage__pb2.Mail.FromString,
                    response_serializer=turbomessage__pb2.Status.SerializeToString,
            ),
            'deleteMailIn': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteMailIn,
                    request_deserializer=turbomessage__pb2.Mail.FromString,
                    response_serializer=turbomessage__pb2.Status.SerializeToString,
            ),
            'deleteMailOut': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteMailOut,
                    request_deserializer=turbomessage__pb2.Mail.FromString,
                    response_serializer=turbomessage__pb2.Status.SerializeToString,
            ),
            'readMailIn': grpc.unary_stream_rpc_method_handler(
                    servicer.readMailIn,
                    request_deserializer=turbomessage__pb2.User.FromString,
                    response_serializer=turbomessage__pb2.Mail.SerializeToString,
            ),
            'readMailOut': grpc.unary_stream_rpc_method_handler(
                    servicer.readMailOut,
                    request_deserializer=turbomessage__pb2.User.FromString,
                    response_serializer=turbomessage__pb2.Mail.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'turbomessage.TurboMessage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TurboMessage(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def createUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/createUser',
            turbomessage__pb2.User.SerializeToString,
            turbomessage__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def userExists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/userExists',
            turbomessage__pb2.User.SerializeToString,
            turbomessage__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendMail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/sendMail',
            turbomessage__pb2.Mail.SerializeToString,
            turbomessage__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mailInRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/mailInRead',
            turbomessage__pb2.Mail.SerializeToString,
            turbomessage__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mailOutRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/mailOutRead',
            turbomessage__pb2.Mail.SerializeToString,
            turbomessage__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteMailIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/deleteMailIn',
            turbomessage__pb2.Mail.SerializeToString,
            turbomessage__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteMailOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/deleteMailOut',
            turbomessage__pb2.Mail.SerializeToString,
            turbomessage__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def readMailIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/turbomessage.TurboMessage/readMailIn',
            turbomessage__pb2.User.SerializeToString,
            turbomessage__pb2.Mail.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def readMailOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/turbomessage.TurboMessage/readMailOut',
            turbomessage__pb2.User.SerializeToString,
            turbomessage__pb2.Mail.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
